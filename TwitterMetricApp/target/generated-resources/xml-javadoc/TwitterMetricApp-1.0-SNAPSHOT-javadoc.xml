<?xml version="1.0" encoding="UTF-8" standalone="yes"?><root><package name="com.example.twitter"><class name="TwitterStatusHashtagExtractor" qualified="com.example.twitter.TwitterStatusHashtagExtractor"><comment>&lt;p&gt;TwitterStatusHashtagExtractor class.&lt;/p&gt;</comment><tag name="@since" text="1.0.2"/><method name="beginWindow"/><method name="getNumTags"/><method name="setNumTags"/><field name="numTags"><type qualified="long"/></field><field name="hashtags"><type qualified="com.datatorrent.api.DefaultOutputPort"/></field><field name="input"><type qualified="com.datatorrent.api.DefaultInputPort"/></field></class><class name="TwitterTopCounterApplication" qualified="com.example.twitter.TwitterTopCounterApplication"><comment>Twitter Example Application: &lt;br&gt;
 This example application samples random public status from twitter, send to url
 extractor. &lt;br&gt;
 Top 10 url(s) mentioned in tweets in last 5 mins are displayed on every
 window count (500ms).&lt;br&gt;
 &lt;br&gt;

 Real Time Calculation :&lt;br&gt;
 This application calculates top 10 url mentioned in tweets in last 5
 minutes across a 1% random tweet sampling on a rolling window basis.&lt;br&gt;
 &lt;br&gt;
 Before running this application, you need to have a &lt;a href="https://dev.twitter.com/apps"&gt;Twitter API account&lt;/a&gt;
 and configure the authentication. For launch from CLI, those go into ~/.dt/dt-site.xml:
 &lt;pre&gt;
 {@code
 &lt;?xml version="1.0" encoding="UTF-8"?&gt;
 &lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?&gt;
 &lt;configuration&gt;

   &lt;property&gt; &lt;name&gt;dt.operator.TweetSampler.consumerKey&lt;/name&gt;
   &lt;value&gt;TBD&lt;/value&gt; &lt;/property&gt;

   &lt;property&gt; &lt;name&gt;dt.operator.TweetSampler.consumerSecret&lt;/name&gt;
   &lt;value&gt;TBD&lt;/value&gt; &lt;/property&gt;

   &lt;property&gt; &lt;name&gt;dt.operator.TweetSampler.accessToken&lt;/name&gt;
   &lt;value&gt;TBD&lt;/value&gt; &lt;/property&gt;

   &lt;property&gt; &lt;name&gt;dt.operator.TweetSampler.accessTokenSecret&lt;/name&gt;
   &lt;value&gt;TBD&lt;/value&gt; &lt;/property&gt;
 &lt;/configuration&gt;
 }
 &lt;/pre&gt;
 Custom Attributes: &lt;br&gt;
 &lt;b&gt;topCounts operator : &lt;b&gt;
 &lt;ul&gt;
 &lt;li&gt;Top Count : 10, number of top unique url to be reported.&lt;/li&gt;
 &lt;li&gt;Sliding window count : 600, report over last 5 min (600 * .5 / 60 mins)&lt;/li&gt;
 &lt;li&gt;window slide value : 1&lt;/li&gt;
 &lt;/ul&gt;
 &lt;p&gt;
 Running Java Test or Main app in IDE:

 &lt;pre&gt;
 LocalMode.runApp(new Application(), 600000); // 10 min run
 &lt;/pre&gt;

 Run Success : &lt;br&gt;
 For successful deployment and run, user should see following output on
 console:

 &lt;pre&gt;
 topURLs: {http://goo.gl/V0R05=2, http://etsy.me/10r1Yg3=6, http://tinyurl.com/88b5jqb=2, http://www.justunfollow.com=4, http://fllwrs.com=2, http://goo.gl/a9Sjp=2, http://goo.gl/iKeVH=2, http://Unfollowers.me=7, http://freetexthost.com/j3y03la4g3=2, http://uranaitter.com=4}
 topURLs: {http://goo.gl/V0R05=2, http://etsy.me/10r1Yg3=6, http://tinyurl.com/88b5jqb=2, http://www.justunfollow.com=4, http://fllwrs.com=2, http://goo.gl/a9Sjp=2, http://goo.gl/iKeVH=2, http://Unfollowers.me=7, http://freetexthost.com/j3y03la4g3=2, http://uranaitter.com=4}
 topURLs: {http://goo.gl/V0R05=2, http://etsy.me/10r1Yg3=6, http://tinyurl.com/88b5jqb=2, http://www.justunfollow.com=4, http://fllwrs.com=2, http://goo.gl/a9Sjp=2, http://goo.gl/iKeVH=2, http://Unfollowers.me=7, http://freetexthost.com/j3y03la4g3=2, http://uranaitter.com=4}
 topURLs: {http://goo.gl/V0R05=2, http://etsy.me/10r1Yg3=6, http://tinyurl.com/88b5jqb=2, http://www.justunfollow.com=4, http://fllwrs.com=2, http://goo.gl/a9Sjp=2, http://goo.gl/iKeVH=2, http://Unfollowers.me=7, http://freetexthost.com/j3y03la4g3=2, http://uranaitter.com=4}
 topURLs: {http://goo.gl/V0R05=2, http://etsy.me/10r1Yg3=6, http://tinyurl.com/88b5jqb=2, http://www.justunfollow.com=4, http://fllwrs.com=2, http://goo.gl/a9Sjp=2, http://goo.gl/iKeVH=2, http://Unfollowers.me=7, http://freetexthost.com/j3y03la4g3=2, http://uranaitter.com=4}
 topURLs: {http://goo.gl/V0R05=2, http://etsy.me/10r1Yg3=6, http://tinyurl.com/88b5jqb=2, http://www.justunfollow.com=4, http://fllwrs.com=2, http://goo.gl/a9Sjp=2, http://goo.gl/iKeVH=2, http://Unfollowers.me=7, http://freetexthost.com/j3y03la4g3=2, http://uranaitter.com=4}
 topURLs: {http://goo.gl/V0R05=2, http://etsy.me/10r1Yg3=6, http://tinyurl.com/88b5jqb=2, http://www.justunfollow.com=4, http://fllwrs.com=2, http://goo.gl/a9Sjp=2, http://goo.gl/iKeVH=2, http://Unfollowers.me=7, http://freetexthost.com/j3y03la4g3=2, http://uranaitter.com=4}
 2013-06-17 14:38:55,201 [main] INFO  stram.StramLocalCluster run - Application finished.
 2013-06-17 14:38:55,201 [container-2] INFO  stram.StramChild processHeartbeatResponse - Received shutdown request
 &lt;/pre&gt;

 Scaling Options : &lt;br&gt;
 User can scale application by setting intial partition size &gt; 1 on count
 unique operator. &lt;br&gt;
 &lt;br&gt;

 Application DAG : &lt;br&gt;
 &lt;img src="doc-files/Application.gif" width=600px &gt; &lt;br&gt;
 &lt;br&gt;

 Streaming Window Size : 500ms(default) &lt;br&gt;
 Operator Details : &lt;br&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;b&gt;The twitterFeed operator : &lt;/b&gt; This operator samples random public
 statues from twitter and emits to application. &lt;br&gt;
 Class : com.datatorrent.examples.twitter.TwitterSampleInput &lt;br&gt;
 StateFull : No, window count 1 &lt;br&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;b&gt;The urlExtractor operator : &lt;/b&gt; This operator extracts url from
 random sampled statues from twitter. &lt;br&gt;
 Class : {@link TwitterStatusURLExtractor} &lt;br&gt;
 StateFull : No, window count 1 &lt;br&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;b&gt;The uniqueCounter operator : &lt;/b&gt; This operator aggregates count for each
 url extracted from random samples. &lt;br&gt;
 Class : {@link UniqueCounter} &lt;br&gt;
 StateFull : No, window count 1 &lt;br&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;b&gt; The topCounts operator : &lt;/b&gt; This operator caluculates top url in last 1
 min sliding window count 1. &lt;br&gt;
 Class : com.datatorrent.lib.algo.WindowedTopCounter &lt;br&gt;
 StateFull : Yes, sliding window count 120 (1 min) &lt;br&gt;
 &lt;/li&gt;
 &lt;li&gt;&lt;b&gt;The operator Console: &lt;/b&gt; This operator just outputs the input tuples
 to the console (or stdout). &lt;br&gt;
 &lt;/li&gt;
 &lt;/ul&gt;</comment><tag name="@since" text="0.3.2"/><method name="populateDAG"/><field name="SNAPSHOT_SCHEMA"><type qualified="java.lang.String"/></field><field name="CONVERSION_SCHEMA"><type qualified="java.lang.String"/></field><field name="APP_NAME"><type qualified="java.lang.String"/></field></class><class name="TwitterStatusURLExtractor" qualified="com.example.twitter.TwitterStatusURLExtractor"><comment>&lt;p&gt;TwitterStatusURLExtractor class.&lt;/p&gt;</comment><tag name="@since" text="0.3.2"/><field name="url"><type qualified="com.datatorrent.api.DefaultOutputPort"/></field><field name="input"><type qualified="com.datatorrent.api.DefaultInputPort"/></field></class><class name="CCPAggregator" qualified="com.example.twitter.CCPAggregator"><comment>Created by bhupesh on 3/7/17.</comment><method name="aggregate"/></class><class name="StringFilter" qualified="com.example.twitter.StringFilter"><comment>Created by bhupesh on 3/7/17.</comment><field name="input"><type qualified="com.datatorrent.api.DefaultInputPort"/></field><field name="output"><type qualified="com.datatorrent.api.DefaultOutputPort"/></field></class><class name="WindowedTopCounter" qualified="com.example.twitter.WindowedTopCounter"><comment>WindowedTopCounter is an operator which counts the most often occurring tuples in a sliding window of a specific size.
 The operator expects to receive a map object which contains a set of objects mapped to their respective frequency of
 occurrences. e.g. if we are looking at most commonly occurring names then the operator expects to receive the tuples
 of type Map&lt;String, Intenger&gt; on its input port, and at the end of the window it emits 1 object of type Map&lt;String, Integer&gt;
 with a pre determined size. The emitted object contains the most frequently occurring keys.</comment><tag name="@param" text="&lt;T&gt; Type of the key in the map object which is accepted on input port as payload. Note that this key must be HashMap friendly."/><tag name="@since" text="0.3.2"/><method name="setup"/><method name="beginWindow"/><method name="endWindow"/><method name="teardown"/><method name="setTopCount"><comment>Set the count of most frequently occurring keys to emit per map object.</comment><tag name="@param" text="count count of the objects in the map emitted at the output port."/></method><method name="getTopCount"/><method name="getWindows"><tag name="@return" text="the windows"/></method><method name="setWindows"><tag name="@param" text="windows the windows to set"/></method><method name="getSlidingWindowWidth"><tag name="@return" text="the slidingWindowWidth"/></method><method name="setSlidingWindowWidth"><comment>Set the width of the sliding window.

 Sliding window is typically much larger than the dag window. e.g. One may want to measure the most frequently
 occurring keys over the period of 5 minutes. So if dagWindowWidth (which is by default 500ms) is set to 500ms,
 the slidingWindowWidth would be (60 * 5 * 1000 =) 300000.</comment><tag name="@param" text="slidingWindowWidth - Sliding window width to be set for this operator, recommended to be multiple of DAG window."/></method><method name="getDagWindowWidth"><tag name="@return" text="the dagWindowWidth"/></method><method name="setDagWindowWidth"><comment>Set the width of the sliding window.

 Sliding window is typically much larger than the dag window. e.g. One may want to measure the most frequently
 occurring keys over the period of 5 minutes. So if dagWindowWidth (which is by default 500ms) is set to 500ms,
 the slidingWindowWidth would be (60 * 5 * 1000 =) 300000.</comment><tag name="@param" text="dagWindowWidth - DAG's native window width. It has to be the value of the native window set at the application level."/></method><field name="FIELD_TYPE"><type qualified="java.lang.String"/></field><field name="FIELD_COUNT"><type qualified="java.lang.String"/></field><field name="input"><type qualified="com.datatorrent.api.DefaultInputPort"/><comment>Input port on which map objects containing keys with their respective frequency as values will be accepted.</comment></field><field name="output"><type qualified="com.datatorrent.api.DefaultOutputPort"/></field></class><class name="NonEnglishFilter" qualified="com.example.twitter.NonEnglishFilter"><comment>Created by bhupesh on 3/7/17.</comment><method name="getEnglishTags"/><method name="setEnglishTags"/><method name="getNonEnglishTags"/><method name="setNonEnglishTags"/><field name="englishTags"><type qualified="long"/></field><field name="nonEnglishTags"><type qualified="long"/></field><field name="input"><type qualified="com.datatorrent.api.DefaultInputPort"/></field><field name="output"><type qualified="com.datatorrent.api.DefaultOutputPort"/></field></class><class name="AppMetricComputer" qualified="com.example.twitter.AppMetricComputer"><comment>Created by bhupesh on 3/7/17.</comment><method name="computeAppLevelMetrics"/></class><class name="SlidingContainer" qualified="com.example.twitter.SlidingContainer"><comment>Developed for a example&lt;br&gt;</comment><tag name="@param" text="&lt;T&gt; Type of object for which sliding window is being maintained."/><tag name="@since" text="0.3.2"/><method name="adjustCount"/><method name="slide"/><method name="toString"/></class></package></root>